
=================================================================
                    PAQUETAGE               
=================================================================
Au niveau du paquetage:
ch.epfl.cs107.play.game.arpg: contient les classes dÃ©finissant un mÃ©canisme du jeu ARPG comme (ARPGItem, deathScreen gui ,ARPG...)
ch.epfl.cs107.play.game.arpg.actor : contient les acteurrs qui figurent dans le jeu ARPG 
ch.epfl.cs107.game.arpg.area: contient les classes de Areas
ch.epfl.cs107.game.arpg.handler : contient l'interface ARPGInteractionVisitor qui est hÃ©ritÃ©e par les classes handler de tous les ARPGInteractors
la classe de base abstraite Monster est dans le paquet rpg.actor et ceci car il sert de baase à differents ennemis de differents jeux possibles



=================================================================
                    SHOP               
=================================================================
les mÃ©thodes buy() et sell() qui permettent lâ€™Ã©change dâ€™Ã©quipements sont dÃ©lÃ©guÃ©s Ã  l'interface Inventory.Holder
qui seront redÃ©finies dans les classes des personnages qui puissent faire ces Ã©changes d'Ã©quipements comme l'ARPGPlayer et le ShopMan 
sans falloir Ã  connaitre les inventaires des personnages concernÃ©es.
cette implÃ©mentation du concept du shop nous laisse au futur le choix de dÃ©finir de nouveaux Actors qui puissent faire ces Ã©changes 
sans rien modifier .
=================================================================
                    GUI                  
=================================================================

Au niveau du GUI: 
on a choisi de positionner les diffÃ©rents Ã©lÃ©ments du GUI relativement aux dimensions de la fenÃªtre du jeu 
en effet si on voulait rendre la fenÃªtre du jeu Resizable ou en plein Ã©cran tous les Ã©lÃ©ments s'adapteront aux nouveaux dimensions


=================================================================
                    CAMERA                    
=================================================================
Au niveau de la camÃ©ra :
on a choisi de ne pas laisser la camÃ©ra centrÃ© sur le joueur tous le temps 
en effet , la position du camÃ©ra dans l'aire est limitÃ© pour ne pas englober une partie hors de l'aire courante(les zones noires dans la fenÃªtre) 
et ceci pour augmenter l'immersion dans le jeu
On a aussi ajoute une methode a la classe Vector qui prend en parametre un vecteur et rend un autre vecteur avec les valeurs plafonnee x et y du parametre

=================================================================
                    INTERACTIONS               
=================================================================
Au niveau des interactions;
Quand le joueur appuie sur une touche dâ€™interaction(ESPACE ou la touche T), cela va rendre le joueur demandeur dâ€™interaction a distance(wantsViewInteraction true), pendant une seule frame, et qui va Ãªtre remise a zÃ©ro au cours de la prochaine update(une fois lâ€™interaction finie)
De cette maniÃ¨re, lâ€™interaction ne ce fait quâ€™une seule fois.

On a choisi dâ€™intÃ©grer avec le joueur une Ã©numÃ©ration sur le type dâ€™interaction qui nous a permis dâ€™avoir plusieurs interaction avec un mÃªme Ã©lÃ©ment dans le jeu.
Par exemple, en choisissant de dâ€™interagir avec un villageois par une interaction de parole( par lâ€™appui sur le bouton T), le villageois va nous afficher un texte spÃ©cifique, et en choisissant de le frapper avec une Ã©pÃ©e, il aura une autre expression, en lui prÃ©sentant une clÃ© il nous indiquera quel type de clÃ© câ€™est et ou lâ€™utiliser.
De mÃªme avec le coffre (chest)
En conclusion, les interactions du player avec les autres acteurs du jeu changent avec chaque type dâ€™interaction, en effet cette implÃ©mentation nous permettra au futur de dÃ©finir de nouveaux types dâ€™interactions sans changer lâ€™implÃ©mentation actuelle

On a aussi intÃ¨gre une classe DialogTrigger, qui est un simple Ã©lÃ©ment si sur lequel le player marche affichera une boite de dialogue qui pourra donner une certaine indication au joueur.
Ce type dâ€™acteur peut Ã©ventuellement Ãªtre Ã©tendu et mettre en place une interaction plus Ã©voluÃ©e avec le joueur

=================================================================
                    SIGNAUX                
=================================================================
En ce qui concerne les signaux, pour la partie de la cave,
Les deux flameSkull, Ã©tant considÃ©rÃ©s comme des signaux, lâ€™aire de la cave va surveiller ces deux Ã©lÃ©ments, et une fois que leur deux signaux sont activÃ©s (lorsquâ€™il sont morts, avec lâ€™interface And hÃ©ritant de signal) ,lâ€™aire va ajouter une clÃ© de coffre 
En choisissant dâ€™implÃ©menter lâ€™interface Signal de cette maniÃ¨re, cela nous permet  de prendre les objets qui sont des signaux en tant que signaux et non en tant quâ€™entitÃ© de jeux, ce qui est meilleur pour lâ€™encapsulation et de point de vu fonctionnel


=================================================================
                    EXTENSIONS                 
=================================================================
RÃ©sumÃ© des extensions:
-Interactions avancÃ©es
-EvÃ©nements dÃ©pendants de signaux
-Nouvelles aires: cave 1 + cave2+ temple
-Menu inventaire
-Magasin + vendeur
-Villageois interactif
-Barre de niveau de vie des monstres
-Cascade dâ€™eau animÃ©e
-GameOver
-Fin de jeu
-DialogTrigger: Ã©lÃ©ments de jeu dÃ©clencheur de dialogue
-Camera qui nâ€™affiche pas les zone hors de lâ€™aire
-Baguette magique ramassabale de lâ€™aire du temple
